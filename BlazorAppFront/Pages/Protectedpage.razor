@page "/Protectedpage"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@using BlazorAppFront.Services
@inject UserServices UserService

@attribute [Authorize]
@inject AuthenticationStateProvider AuthenticationStateProvider

<h1>Protected Page</h1>
<p>This page is only visible to authenticated users.</p>

@if (claims != null)
{
    <h3>Available Claims:</h3>
    <ul>
        @foreach (var claim in claims)
        {
            <li>@claim.Type: @claim.Value</li>
        }
    </ul>
}

@if (userInfo != null)
{
    <div>
        <h3>User Information:</h3>
        <p>ID: @userInfo.idE</p>
    </div>
}
else if (loading)
{
    <p>Loading user information...</p>
}
else
{
    <p>No user information available</p>
}

@code {
    private IEnumerable<Claim> claims;
    private showID userInfo;
    private bool loading = true;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;

            claims = user.Claims;

            var email = user.FindFirst(System.IdentityModel.Tokens.Jwt.JwtRegisteredClaimNames.Email)?.Value;
            
            if (!string.IsNullOrEmpty(email))
            {
                var result = await UserService.GetUserByemail(email);
                
                userInfo = new showID()
                {
                    idE = result?.ToString() ?? "No ID available"
                };
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading user data: {ex.Message}");
        }
        finally
        {
            loading = false;
        }
    }
    
    public class showID
    {
        public string idE { get; set; } = string.Empty;
    }
}